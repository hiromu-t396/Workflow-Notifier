class e{constructor(){this.token=null,this.isAuthenticated=!1}async initialize(){try{const t=await chrome.storage.local.get(["githubToken"]);return t.githubToken?(this.token=t.githubToken,this.isAuthenticated=!0,!0):!1}catch(t){return console.error("Failed to initialize auth:",t),!1}}async checkAuthStatus(){try{return this.token?(await fetch("https://api.github.com/user",{headers:{Authorization:`token ${this.token}`,Accept:"application/vnd.github.v3+json"}})).ok:!1}catch(t){return console.error("Auth status check failed:",t),!1}}async login(){try{const t=await chrome.runtime.sendMessage({type:"authenticate"});if(t.success&&t.token)return this.token=t.token,this.isAuthenticated=!0,!0;throw new Error(t.error||"Authentication failed")}catch(t){throw console.error("Login failed:",t),t}}async logout(){try{return await chrome.storage.local.remove(["githubToken"]),this.token=null,this.isAuthenticated=!1,!0}catch(t){throw console.error("Logout failed:",t),t}}getAuthHeaders(){if(!this.token)throw new Error("No authentication token available");return{Authorization:`token ${this.token}`,Accept:"application/vnd.github.v3+json"}}async getUserInfo(){try{if(!this.token)throw new Error("Not authenticated");const t=await fetch("https://api.github.com/user",{headers:this.getAuthHeaders()});if(!t.ok)throw new Error("Failed to fetch user info");return await t.json()}catch(t){throw console.error("Failed to get user info:",t),t}}async getToken(){try{if(this.token)return this.token;const t=await chrome.storage.local.get(["githubToken"]);if(t.githubToken)return this.token=t.githubToken,this.token;throw new Error("No token available")}catch(t){throw console.error("Failed to get token:",t),t}}async refreshToken(){try{return await this.login()}catch(t){throw console.error("Token refresh failed:",t),t}}async handleAuthError(t){if(console.error("Auth error:",t),t.response&&t.response.status===401)return await this.logout(),await this.login();throw t}}const o=new e;export{o as a};
